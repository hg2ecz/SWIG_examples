/* generated by rust-bindgen and manually repaired */

#[repr(C)]
pub struct Example__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
pub struct Example {
    pub vtable_: *const Example__bindgen_vtable,
    pub s: [::std::os::raw::c_char; 200usize],
    pub counter: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Example() {
    assert_eq!(
        ::std::mem::size_of::<Example>(),
        216usize,
        concat!("Size of: ", stringify!(Example))
    );
    assert_eq!(
        ::std::mem::align_of::<Example>(),
        8usize,
        concat!("Alignment of ", stringify!(Example))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Example>())).s as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Example),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Example>())).counter as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(Example),
            "::",
            stringify!(counter)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN7ExampleC1EPKc"]
    pub fn Example_Example(this: *mut Example, s: *const ::std::os::raw::c_char);
}
impl Example {
    #[inline]
    pub unsafe fn Get(&mut self) -> *mut ::std::os::raw::c_char {
        Example_Get(self)
    }
    #[inline]
    pub unsafe fn new(s: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        Example_Example(&mut __bindgen_tmp, s);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        Example_Example_destructor(self)
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN7Example3GetEv"]
    pub fn Example_Get(this: *mut Example) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ZN7ExampleD1Ev"]
    pub fn Example_Example_destructor(this: *mut Example);
}
